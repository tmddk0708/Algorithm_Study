import java.util.*;
import java.io.*;

public class App {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        String[] roomList = new String[N];          //방정보 목록
        Boolean[][] time = new Boolean[50][9];      //예약가능시간 초기화
        for (int n = 0; n < N; n++) {
            for (int m = 0; m < 9; m++) {
                time[n][m] = true;
            }
        }

        for (int i = 0; i < N; i++) {
            roomList[i] = br.readLine();
        }
        Arrays.sort(roomList);                      //방정보 저장이후 바로 정렬
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            String currentRoom = st.nextToken();                    //예약확인할 방
            int meetStartTime = Integer.parseInt(st.nextToken());   //회의시작시각
            int meetEndTime = Integer.parseInt(st.nextToken());     //회의종료시각
            boolean rsvAble = true;
            for (int roomIdx = 0; roomIdx < N; roomIdx++) {
                if (currentRoom.equals(roomList[roomIdx])) {        //방목록에서 예약확인할 방정보 검색
                    for (int timeIdx = meetStartTime; timeIdx < meetEndTime; timeIdx++) {
                        if (time[roomIdx][timeIdx - 9] == false) {  //회의시작시각~회의종료시각에 예약이 불가한 슬롯이 있으면 예약불가
                            rsvAble = false;
                            break;
                        }
                    }
                    if (rsvAble == true) {                          //예약가능하면 예약잡음
                        for (int timeIdx = meetStartTime; timeIdx < meetEndTime; timeIdx++) {
                            time[roomIdx][timeIdx - 9] = false;
                        }
                    }
                    break;
                }
            }
        }
        for (int i = 0; i < N; i++) {
            bw.write("Room " + roomList[i] + ":\n");
            int rsvCnt = 0;             //예약가능 구간 개수
            String outputTime = "";     //예약가능 시간 찍어줄 String
            for (int j = 9; j < 18; j++) {
                if (j == 9 && time[i][j - 9] == true) {
                    outputTime = "09-10";       //9시 예약가능하면 넣어줌
                    rsvCnt++;
                } else if (time[i][j - 9] == true) {
                    if (time[i][j - 10] == true) {      //이전 구간과 이어지면 String 수정
                        outputTime = outputTime.substring(0, outputTime.length() - 2) + (j + 1);
                    } else {
                        if (!outputTime.isEmpty()) {    //최초입력이 아니면 개행입력
                            outputTime = outputTime + "\n";
                        }
                        outputTime = outputTime + j + "-" + (j + 1);    //예약가능 구간 추가
                        rsvCnt++;
                    }
                }
            }
            if (rsvCnt == 0) {
                bw.write("Not available");
            } else {
                bw.write(rsvCnt + " available:\n");
                bw.write(outputTime);
            }
            if (i < N - 1) {
                bw.write("\n-----\n");
            }
        }
        bw.close();
    }




    
    // 고뇌의 흔적....Map을 써보려다가 실패한 흔적
    // public static void main2(String args[]) throws IOException {
    //     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    //     BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    //     StringTokenizer st = new StringTokenizer(br.readLine());
    //     int N = Integer.parseInt(st.nextToken());
    //     int M = Integer.parseInt(st.nextToken());
    //     Boolean[] time = new Boolean[] { true, true, true, true, true, true, true,
    //             true, true };
    //     Map<String, Boolean[]> meetingroomList = new HashMap<>();
    //     for (int i = 0; i < N; i++) {
    //         meetingroomList.put(br.readLine(), time.clone());
    //     }
    //     for (int i = 0; i < M; i++) {
    //         st = new StringTokenizer(br.readLine());
    //         String meetingTemp = st.nextToken();
    //         int frTime = Integer.parseInt(st.nextToken());
    //         int toTime = Integer.parseInt(st.nextToken());
    //         for (Map.Entry<String, Boolean[]> tmp : meetingroomList.entrySet()) {
    //             if (tmp.getKey().equals(meetingTemp)) {
    //                 Boolean[] timeTmp = tmp.getValue().clone();
    //                 boolean able = true;
    //                 for (int k = frTime; k < toTime; k++) { // 해당 예약이 가능한지 구간 확인
    //                     if (timeTmp[k - 9] == false) {
    //                         able = false;
    //                         break;
    //                     }
    //                 }
    //                 if (able == true) { // 해당 예약이 가능하므로 회의실 재실처리
    //                     for (int k = frTime; k < toTime; k++) {
    //                         timeTmp[k - 9] = false;
    //                     }
    //                 }
    //                 break;
    //             }
    //         }
    //     }

    //     Object[] mapkey = meetingroomList.keySet().toArray();
    //     Arrays.sort(mapkey);
    //     for (int i = 0; i < N; i++) {
    //         // String meetingTemp = meetingroomList.keySet().toString();
    //         // String[] meetingTemp = meetingroomList.keySet().toArray(new
    //         // String[meetingroomList.size()];
    //         String meetingTemp = meetingroomList.entrySet().toString();
    //         int ableCnt = 0;
    //         String ableTimeList = new String();
    //         for (Map.Entry<String, Boolean[]> tmp : meetingroomList.entrySet()) {
    //             // System.out.println("[meetingroomList.keySet().toString()]:" +
    //             meetingroomList.keySet().toString();
    //             // System.out.println("[meetingroomList.keySet()]:" +
    //             meetingroomList.keySet();
    //             System.out.println("[meetingroomList.entrySet().toString()]:" + meetingTemp);
    //             System.out.println("[key]:" + tmp.getKey() + ", [value]:" + tmp.getValue());
    //             bw.write("1" + ":\n");
    //             if (tmp.getKey().equals(meetingTemp)) {
    //                 Boolean[] valueTmp = tmp.getValue();
    //                 for (int k = 0; k < 9; k++) {
    //                     if (valueTmp[k] == true) {
    //                         if (k == 0) {
    //                             ableTimeList = "09-10";
    //                             ableCnt++;
    //                         } else if (valueTmp[k - 1] == true) {
    //                             ableTimeList = ableTimeList.substring(ableTimeList.length() - 2,
    //                                     ableTimeList.length())
    //                                     + Integer.toString((k + 9) + 1);
    //                         } else {
    //                             ableTimeList = ableTimeList + Integer.toString(k + 9) + '-'
    //                                     + Integer.toString((k + 9) + 1);
    //                             ableCnt++;
    //                         }
    //                     }
    //                 }
    //             }
    //         }
    //         bw.write("ableCnt : " + Integer.toString(ableCnt) + "\n");
    //         bw.write("Room " + meetingTemp + ":\n");
    //         if (ableCnt == 0) {
    //             bw.write("Not available\n");
    //         } else {
    //             bw.write(Integer.toString(ableCnt) + " available:\n");
    //             for (int k = 0; k < ableTimeList.length() / 5; k++) {
    //                 bw.write(ableTimeList.substring(k, k + 5) + "\n");
    //             }
    //         }
    //         if (i < N) {
    //             bw.write("-----" + "\n");
    //         }
    //     }
    //     bw.close();
    // }
}
